{"version":3,"sources":["models/Route.ts","models/Subway.ts","models/Line.ts","index.ts"],"names":[],"mappings":";;;;;;AEEA,AFGA,ACFA,ICDA,AFGA,ACFA,ICDA,CFGA,CCFA;ACDA,AFGA,ACFA;ACDA,AFGA,ACFA,YCDA,AFGA,ACFA;ACDA,AFQI,ACHA,WCLJ,AFQI,ACHA,ICLJ,CFQI,CAAY,ACHZ,CCLJ,ADKgB,CC2Jf,GD3JG,CDGA,CCHsB,CDGM,IAA5B,EAAsC;AAClC,ACHA,SDGK,ACHA,IAAL,EDGA,CCHY,EDGE,ECHd,IDGA;AERJ,AFSI,ACHH,ECND,IAAA,CAAA,EFSS,IAAL,GETJ,AFSgB,CEThB,GFSI,EETJ,GAAA,YAAA;ACHJ,ADIQ,AFSH,IGbL,IDIY,EAAE,CCJd,EDIiB,CCJjB,eAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;ADKY,ADMR,EAAA,ICNQ,EDMR,CAAA,CCNY,EAAE,IADD,EDOb,CAAA,WAAA,GAAA,YAAA;AEVJ,ADKY,AFSR,ACHI,EDGJ,EGdJ,EDKY,CFSR,CAAA,ACHQ,IEXZ,EDKoB,CCLpB,CDMgB,CACI,AFOhB,CAAA,CCHmB,GAAW,EAA1B,GDGJ,GGdJ,AHcI,CGdJ,OAAA,CAAA,CHcc,YAAV,EAAgC,EGdpC,CAAA,CAAA,MHcI,EAAkD;AEPhC,AFQd,ACFA,QCNc,AFQV,ACFA,EAAE,ECNY,CDMT,CCNW,IDMN,IAAL,CAAU,CDEnB,GERY,CDMH,EAAT;AEZR,ADM2C,AFSnC,ACFA,IEbR,IDM2C,AFS/B,ACFA,EEbZ,AFac,ECPiC,CCN/C,AFaiB,CCPgC,IAA7B,ADOE,IDEd,ACFS,CAAU,KEb3B,AFaiB,CEbjB,CFaQ,MEbR,CAAA,eAAA,CAAA,CAAA;ADMuD,AFU/C,ACFA,QCR+C,AFU3C,ACFA,EAAE,GAAG,KAAK,ECR6C,AFU3D,EEV6D,ADQpD,CAAU,KAAV,EAAT;AEZR,ADIoB,AFWZ,ACFA,IEbJ,GDGY,CFYJ,ACFA,CCRQ,CDQN,EEbF,CFaK,EEbgB,GHezB,ACFc,IAAL,CEbwB,AFad,CEbe,IFazB,EAAT,QEbyB,CAAwB,WAAxB,CAAjC;AAEA,ADGsB,AFWd,ACFA,IEZJ,IAAI,ADGc,AFWV,ACFA,EAAE,CEZH,CDGe,CDST,CCTW,CCHb,GFYO,GEZP,CAAA,AFYE,CAAU,EDEnB,EEXY,CDSH,CEZN,CFYH,CEZR;AACA,ADE2C,AFanC,ACFA,IEbJ,AFaI,ICXmC,AFa/B,EGfF,EDEqC,CCFlC,AHeI,CEbgC,CDW9B,CDEW,ACFV,CEbH,CDEG,AFaZ,ECFA,CAAiB,EAAjB,EEbS,AFaY,CEbZ,CFaT,EAAyB,EAAzB,EEbK,AFawB,CEbb,CFahB,EAAiC,CEb5B,CAAb,AFaQ;AEZR,ADCuD,AFe/C,ACFA,IEdJ,AHgBI,IEf+C,CCD9C,EFcM,CEdH,IAAI,IDCmD,AFe3C,EEf6C,ADa7D,CEdQ,AHgBW,CGhBX,IHgBgB,GGhBpB,CAAU,MAAV,EAAkB,IAAlB,CAAZ,GHgB2B,CAA0B,YAA1B,CAAnB;AGdR,ADDoB,AFgBZ,ACFH,GAZD,CDcI,GElBQ,CCGR,CAAC,ADAW,SFeE,GAAG,IGfzB,CAA0B,AHeI,OGf9B,EAAmC,WHeV,CGfU,AHegB,UAA1B,CAAjB;AGdJ,ADDkB,AFgBd,IAAA,EGfA,EDDc,IAAI,EAAE,EFgBR,GAAG,EGfA,GAA8B,AHezB,MAAL,CAAY,CGf0B,ADDzC,CCC0C,KHevC,CAAoB,QGfU,CAAwB,OHetD,CAAf,SGf6C,EAA4C,KAA7F;AACA,ADF4C,AFiBxC,ACFJ,EAAA,EDEI,EGfA,EDFwC,ADe5C,CAAA,GCfgD,EAAE,AFiBpC,GAAG,CEjBD,ADehB,CEbiB,AFajB,GEb+C,AHezB,MAAL,CAAY,CGf0B,CAAC,GFaxD,EDEiB,CAAoB,ACFrC,QEb+C,CAAwB,CFavD,IDEC,CAAb,KCFJ,EAAgC,EEbe,EAA0C,KAAzF;AACA,ADHwD,AFmBpD,ACHA,EEbJ,EHgBI,IEnBoD,ADgB9C,CEbH,CAAC,GAAR,CAAY,MDHwD,CFmB/C,CEnBiD,EFmB9C,ACHE,GAAW,EEbrC,AHgB6B,EGhBA,IHgBL,CAAY,CCHW,CAAC,MEbhD,EFaqC,CAAoB,IDGjC,CAA4B,CCHhD,WDGoB,CAApB;AGfJ,ADJgB,AFqBZ,ACJA,MEbA,CDPQ,CFwBF,ACJA,CChBM,KCGJ,EFaM,CEbH,EFa8D,GEbzD,CAAC,MFakE,CAAC,EEbzE,CAAgB,AHiBI,GAAc,ECJ7C,UEbW,AHiB8C,CAAC,CGjBd,OHiB5C,MGjBW,CAAf;AACA,ADJkB,AFqBd,ACJA,EEbJ,MDJkB,AFqBR,ACJF,CEbD,CAAC,EDJc,CCItB,CAAY,ADJY,ODiBH,CEbrB,EFakC,EAA9B,KDI6B,CErBjB,EFqB+B,UAAU,CAAC,QAAtD;AGhBP,ADL+C,AFsBxC,CGvBR,ODCgD,AFsBlC,IEtBsC,EAAE,IAAlC,KFsBS,GAAG,KAAK,yBAAL,CAA+B,YAA/B,EAA6C,yBAA7C,CAAxB;AGfR,ADP4D,AFuBpD,ACJA,OEZD,CAAC,ADPoD,AFuB9C,CCJD,EEZb,CAAY,CFYK,CAAC,GAAG,CAAb,CEZR,CDPwE,ADmBhD,CDIG,ACJF,CCnBiD,EFuB5C,ACJF,KDIO,WCJ3B,EAAsC,CAAC,EAAvC,EAA2C,ODIrB,CAA+B,UAA/B,EAA2C,uBAA3C,CAAtB;AEvBY,ADoBR,OCxBI,EAKI,CDmBJ,QAAQ,CAAC,CAAD,CAAR,CAAY,YAAZ,KAA6B,MAAjC,EAAyC;ACnB/B,AFwBd,ACJQ,QCpBM,AFwBV,ACJI,ICpBU,CFwBT,CExBW,ODoBC,CAAC,CDIlB,CAAgB,EExBR,ADoBJ,CAAmB,QAAQ,CAAC,CAAD,CAAR,CAAY,CDInC,EAAkC,SCJ9B,KDIJ,CAAJ,EAAuD;AExBrB,AFyB9B,ACJC,MDID,EEzB8B,GFyBzB,CEzB6B,EAAE,AFyB5B,IEzBA,CFyBK,uBAAL,CAA6B,eAA7B,EAA8C,aAA9C,EAA6D,yBAA7D,CAAR;AEzB0C,AF0B7C,ACJA,KDED,GExB8C,GF0BvC,SE1BmD,EAAE;AAAhD,AF4BA,OEjCJ,EAMI,CF2BQ,qBAAqB,GAAK,iBAAiB,CAAA,MAAnD;AE3BE,ADsBd,QCtBc,GDsBP,CCtBW,EAAE,UDsBpB,KCtBY;AAAyB,AF4BjC,ACLP,GAXD,KCZyC,GF4B5B,CE5BgC,EAAE,CF4B9B,CAAC,EE5BF,CF4BK,CAAb,EAAgB,CAAC,GAAG,qBAApB,EAA2C,CAAC,EAA5C,EAAgD;AE5BH,AF8BzC,QE9ByC,IF8BnC,QE9B+C,EAAE,EF8BvC,GAAG,KAAK,MAAL,CAAY,OAAZ,CAAoB,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","file":"index.js","sourceRoot":"..\\src","sourcesContent":["import station from '../interfaces/station'\r\nimport line from '../interfaces/line'\r\nimport Subway from './Subway';\r\nimport Line from './Line';\r\n\r\nexport default class Route {\r\n\r\n    subway: Subway;\r\n    line: Line;\r\n\r\n    constructor(subway: Subway, line: Line) {\r\n        this.subway = subway;\r\n        this.line = line;\r\n    }\r\n\r\n    findRoute(startStation: String, endStation: String) {\r\n        let startingLineName: String;\r\n        let endingLineName: String;\r\n        let startingLine: line;\r\n        let endingLine: line;\r\n        let findIntersections: String[];\r\n\r\n        let route: String[] = [];\r\n\r\n        startingLineName = this.findStationsLineName(startStation);\r\n        endingLineName = this.findStationsLineName(endStation);\r\n        startingLine = this.subway.getLine(startingLineName);\r\n        endingLine = this.subway.getLine(endingLineName);\r\n\r\n        findIntersections = this.subway.getIntersection(startingLine);\r\n\r\n        const allStationsOfStartingLine: station[] = startingLine.stations;\r\n        const allStationsOfEndingLine: station[] = endingLine.stations;\r\n        const startingStation = this.findStationPositionInLine(startStation, allStationsOfStartingLine);\r\n        const endingStation = this.findStationPositionInLine(endStation, allStationsOfEndingLine);\r\n\r\n        if (this.isSameLine(startingLineName, endingLineName)) {\r\n            route = this.calculateRoutOfSameLine(startingStation, endingStation, allStationsOfStartingLine);\r\n        } else {\r\n\r\n            const { length: numberOfIntersections } = findIntersections;\r\n            for (let i = 0; i < numberOfIntersections; i++) {\r\n\r\n                const endingLine = this.subway.getLine(findIntersections[i]);\r\n                if (this.line.hasStation(endingLine, endStation)) {\r\n                    let commonStation: String = this.findCommonStation(startingLine, endingLine);\r\n                    const commonStationIndexOfStartingLine = this.findStationPositionInLine(commonStation, allStationsOfStartingLine);\r\n                    const commonStationIndexOfEndingLine = this.findStationPositionInLine(commonStation, allStationsOfEndingLine);\r\n\r\n                    route = this.calculateRoutOfSameLine(startingStation, commonStationIndexOfStartingLine, allStationsOfStartingLine);\r\n                    route.push(...this.calculateRoutOfSameLine(commonStationIndexOfEndingLine, endingStation, allStationsOfEndingLine));\r\n                }\r\n            }\r\n        }\r\n        return route;\r\n\r\n    }\r\n\r\n    findCommonStation(line1: line, line2: line) {\r\n        const numberOfFirstLineStations: number = line1.stations.length;\r\n        const numberOfSecondLineStations: number = line2.stations.length;\r\n        const stationsOfFirstLine: station[] = line1.stations;\r\n        const stationsOfSecondLine: station[] = line2.stations;\r\n\r\n\r\n        for (let i = 0; i < numberOfFirstLineStations; i++) {\r\n            for (let j = 0; j < numberOfSecondLineStations; j++) {\r\n                if (stationsOfFirstLine[i].name === stationsOfSecondLine[j].name) {\r\n                    return stationsOfFirstLine[i].name;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    findStationsLineName(station: String): String {\r\n        const numberOfLines: number = this.subway.getAllLines().length;\r\n        const lines = this.subway.getAllLines();\r\n        let line: String = \"\";\r\n\r\n        for (let i = 0; i < numberOfLines; i++) {\r\n\r\n            const numberOfStations = lines[i].stations.length;\r\n            for (let j = 0; j < numberOfStations; j++) {\r\n\r\n                const stationName = lines[i].stations[j].name;\r\n                const lineName = lines[i].name;\r\n                if (stationName === station) {\r\n                    line = lineName;\r\n                }\r\n            }\r\n        }\r\n        return line;\r\n    }\r\n\r\n    isSameLine(startingLineName: String, endingLineName: String): boolean {\r\n        return startingLineName === endingLineName;\r\n    }\r\n\r\n    findStationPositionInLine(stationName: String, line: station[]) {\r\n        return line.findIndex(x => x.name === stationName);\r\n    }\r\n\r\n    calculateRoutOfSameLine(startingStation: number, endingStation: number, line: station[]): String[] {\r\n        let route: String[] = [];\r\n\r\n        for (let i = startingStation; i <= endingStation; i++) {\r\n            route.push(line[i].name);\r\n        }\r\n        return route;\r\n    }\r\n}","import line from '../interfaces/line'\r\nimport Line from './Line';\r\n\r\nexport default class Subway {\r\n\r\n    line: Line;\r\n\r\n    constructor(line: Line) {\r\n        this.line = line;\r\n    }\r\n\r\n    getAllLines(): line[] {\r\n        let allStations: line[] = [];\r\n\r\n        let U1 = this.line.getU1();\r\n        let U2 = this.line.getU2();\r\n        let U3 = this.line.getU3();\r\n        let U4 = this.line.getU4();\r\n        let U6 = this.line.getU6();\r\n\r\n        allStations.push(U1, U2, U3, U4, U6);\r\n\r\n        return allStations;\r\n    }\r\n\r\n    getIntersection(subwayLine: line): String[] {\r\n        const numberOfStations: number = subwayLine.stations.length;\r\n        const stations: { name: String; line: String; intersection: String }[] = subwayLine.stations;\r\n        let intersections: String[] = [];\r\n\r\n        for (let i = 0; i < numberOfStations; i++) {\r\n            if (stations[i].intersection !== \"none\") {\r\n                intersections.push(stations[i].intersection);\r\n            }\r\n        }\r\n        return intersections;\r\n    }\r\n\r\n    getStationsNameOnIntersection(firstLine: String, secondLine: String) {\r\n\r\n    }\r\n\r\n    getLine(startingLineName: String) {\r\n        let getLine: string = `this.line.get${startingLineName}()`;\r\n        let line = eval(getLine);\r\n        return line;\r\n    }\r\n}","import line from '../interfaces/line'\r\n\r\nexport default class Line {\r\n    getU1(): line {\r\n        let U1 = {\r\n            name: \"U1\",\r\n            stations:\r\n                [\r\n                    { name: \"Reumanplatz\", line: \"U1\", intersection: \"none\" },\r\n                    { name: \"Keplerplatz\", line: \"U1\", intersection: \"none\" },\r\n                    { name: \"Südtiroler Platz\", line: \"U1\", intersection: \"none\" },\r\n                    { name: \"Taubstummengasse\", line: \"U1\", intersection: \"none\" },\r\n                    { name: \"Karlsplatz\", line: \"U1\", intersection: \"U2 U4\" },\r\n                    { name: \"Stephansplatz\", line: \"U1\", intersection: \"U3\" },\r\n                    { name: \"Schwedenplatz\", line: \"U1\", intersection: \"U4\" },\r\n                    { name: \"Nestroyplatz\", line: \"U1\", intersection: \"none\" },\r\n                    { name: \"Praterstern\", line: \"U1\", intersection: \"U2\" },\r\n                    { name: \"Vorgartenstraße\", line: \"U1\", intersection: \"none\" },\r\n                    { name: \"Donauinsel\", line: \"U1\", intersection: \"none\" },\r\n                    { name: \"Kaisermühlen V.I.C\", line: \"U1\", intersection: \"none\" },\r\n                    { name: \"Alte Donau\", line: \"U1\", intersection: \"none\" },\r\n                    { name: \"Kagran\", line: \"U1\", intersection: \"none\" },\r\n                    { name: \"Kagraner Platz\", line: \"U1\", intersection: \"none\" },\r\n                    { name: \"Rennbahnweg\", line: \"U1\", intersection: \"none\" },\r\n                    { name: \"Aderklaer Straße\", line: \"U1\", intersection: \"none\" },\r\n                    { name: \"Großfeldsiedlung\", line: \"U1\", intersection: \"none\" },\r\n                    { name: \"Leopoldau\", line: \"U1\", intersection: \"none\" },\r\n                ]\r\n        }\r\n        return U1;\r\n    }\r\n\r\n    getU2(): line {\r\n        let U2 = {\r\n            name: \"U2\",\r\n            stations: [\r\n                { name: \"Karlsplatz\", line: \"U2\", intersection: \"U1 U4\" },\r\n                { name: \"Museumsquartier\", line: \"U2\", intersection: \"none\" },\r\n                { name: \"Volkstheater\", line: \"U2\", intersection: \"U3\" },\r\n                { name: \"Rathaus\", line: \"U2\", intersection: \"none\" },\r\n                { name: \"Schottentor\", line: \"U2\", intersection: \"none\" },\r\n                { name: \"Schottenring\", line: \"U2\", intersection: \"U4\" },\r\n                { name: \"Taborstraße\", line: \"U2\", intersection: \"none\" },\r\n                { name: \"Praterstern\", line: \"U2\", intersection: \"U1\" },\r\n                { name: \"Messe-Prater\", line: \"U2\", intersection: \"none\" },\r\n                { name: \"Krieau\", line: \"U2\", intersection: \"none\" },\r\n                { name: \"Stadion\", line: \"U2\", intersection: \"none\" },\r\n                { name: \"Donaumarina\", line: \"U2\", intersection: \"none\" },\r\n                { name: \"Donaustadtbrücke\", line: \"U2\", intersection: \"none\" },\r\n                { name: \"Stadlau\", line: \"U2\", intersection: \"none\" },\r\n                { name: \"Hardeggasse\", line: \"U2\", intersection: \"none\" },\r\n                { name: \"Donauspital\", line: \"U2\", intersection: \"none\" },\r\n                { name: \"Aspernstraße\", line: \"U2\", intersection: \"none\" }\r\n            ]\r\n        }\r\n        return U2;\r\n    }\r\n\r\n    getU3(): line {\r\n        let U3 = {\r\n            name: \"U3\",\r\n            stations: [\r\n                { name: \"Ottakring\", line: \"U3\", intersection: \"none\" },\r\n                { name: \"Kendlerstraße\", line: \"U3\", intersection: \"none\" },\r\n                { name: \"Hütteldorfer Straße\", line: \"U3\", intersection: \"none\" },\r\n                { name: \"Johnstraße\", line: \"U3\", intersection: \"none\" },\r\n                { name: \"Schweglerstraße\", line: \"U3\", intersection: \"none\" },\r\n                { name: \"Westbahnhof\", line: \"U3\", intersection: \"U6\" },\r\n                { name: \"Zieglergasse\", line: \"U3\", intersection: \"none\" },\r\n                { name: \"Neubaugasse\", line: \"U3\", intersection: \"none\" },\r\n                { name: \"Volkstheater\", line: \"U3\", intersection: \"none\" },\r\n                { name: \"Herrengasse\", line: \"U3\", intersection: \"none\" },\r\n                { name: \"Stephansplatz\", line: \"U3\", intersection: \"U1\" },\r\n                { name: \"Stubentor\", line: \"U3\", intersection: \"none\" },\r\n                { name: \"Landstraße\", line: \"U3\", intersection: \"U4\" },\r\n                { name: \"Rochusgasse\", line: \"U3\", intersection: \"none\" },\r\n                { name: \"Kard.-Nagl-Platz\", line: \"U3\", intersection: \"none\" },\r\n                { name: \"Schlachthausgasse\", line: \"U3\", intersection: \"none\" },\r\n                { name: \"Erdberg\", line: \"U3\", intersection: \"none\" },\r\n                { name: \"Gasometer\", line: \"U3\", intersection: \"none\" },\r\n                { name: \"Zipperstraße\", line: \"U3\", intersection: \"none\" },\r\n                { name: \"Enkplatz\", line: \"U3\", intersection: \"none\" },\r\n                { name: \"Simmering\", line: \"U3\", intersection: \"none\" }\r\n            ]\r\n        }\r\n        return U3;\r\n    }\r\n\r\n    getU4(): line {\r\n        let U4 = {\r\n            name: \"U4\",\r\n            stations: [\r\n                { name: \"Heiligenstadt\", line: \"U4\", intersection: \"none\" },\r\n                { name: \"Spittelau\", line: \"U4\", intersection: \"U6\" },\r\n                { name: \"Friedensbrücke\", line: \"U4\", intersection: \"none\" },\r\n                { name: \"Roßauer Lände\", line: \"U4\", intersection: \"none\" },\r\n                { name: \"Schottenring\", line: \"U4\", intersection: \"U2\" },\r\n                { name: \"Schwedenplatz\", line: \"U4\", intersection: \"U1\" },\r\n                { name: \"Landstraße\", line: \"U4\", intersection: \"U3\" },\r\n                { name: \"Stadtpark\", line: \"U4\", intersection: \"none\" },\r\n                { name: \"Karlsplatz\", line: \"U4\", intersection: \"U1 U2\" },\r\n                { name: \"Kettenbrückengasse\", line: \"U4\", intersection: \"none\" },\r\n                { name: \"Pilgramgasse\", line: \"U4\", intersection: \"none\" },\r\n                { name: \"Margaretengürtel\", line: \"U4\", intersection: \"none\" },\r\n                { name: \"Längenfeldgasse\", line: \"U4\", intersection: \"U6\" },\r\n                { name: \"Meidling Hauptstraße\", line: \"U4\", intersection: \"none\" },\r\n                { name: \"Schönbrunn\", line: \"U4\", intersection: \"none\" },\r\n                { name: \"Hietzing\", line: \"U4\", intersection: \"none\" },\r\n                { name: \"Braunschweiggasse\", line: \"U4\", intersection: \"none\" },\r\n                { name: \"Unter St. Veit\", line: \"U4\", intersection: \"none\" },\r\n                { name: \"Ober St. Veit\", line: \"U4\", intersection: \"none\" },\r\n                { name: \"Hütteldorf\", line: \"U4\", intersection: \"none\" }\r\n            ]\r\n        }\r\n        return U4;\r\n    }\r\n\r\n    getU6(): line {\r\n        let U6 = {\r\n            name: \"U6\",\r\n            stations: [\r\n                { name: \"Siebenhirten\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Perfektastraße\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Erlaaer Straße\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Alt Erlaa\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Am Schöpfwerk\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Tscherttegasse\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Philadelphiabrücke\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Niederhofstraße\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Längenfeldgasse\", line: \"U6\", intersection: \"U4\" },\r\n                { name: \"Gumpendorfer Straße\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Westbahnhof\", line: \"U6\", intersection: \"U3\" },\r\n                { name: \"Burggasse\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Thaliastraße\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Josefstädter Straße\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Alser Straße\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Michelbeuern AKH\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Währinger Straße\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Nußdorfer Straße\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Spittelau\", line: \"U6\", intersection: \"U4\" },\r\n                { name: \"Jägerstraße\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Dresdenstraße\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Handelskai\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Neue Donau\", line: \"U6\", intersection: \"none\" },\r\n                { name: \"Floridsdorf\", line: \"U6\", intersection: \"none\" },\r\n            ]\r\n        }\r\n        return U6;\r\n    }\r\n\r\n    hasStation(line: line, stationName: String): boolean {\r\n        const stations = line.stations;\r\n        let hasStation = false;\r\n\r\n        const { length: numberOfStations } = stations;\r\n        for (let i = 0; i < numberOfStations; i++) {\r\n            if (stations[i].name === stationName) {\r\n                hasStation = true;\r\n            }\r\n        }\r\n        return hasStation;\r\n    }\r\n}","import Route from './models/Route';\r\nimport Subway from './models/Subway';\r\nimport Line from './models/Line';\r\n\r\nlet findPath: HTMLInputElement = document.getElementById('findRoute') as HTMLInputElement;\r\n\r\nlet line = new Line();\r\nlet subway = new Subway(line);\r\nlet route = new Route(subway, line);\r\n\r\nfindPath.addEventListener('click', () => {\r\n    let startingStation: string = (<HTMLInputElement>document.getElementById(\"startingStation\")).value;\r\n    let endingStation: string = (<HTMLInputElement>document.getElementById(\"endingStation\")).value;\r\n    console.log(startingStation, endingStation);\r\n    let stations = route.findRoute(startingStation, endingStation);\r\n    console.log(stations);\r\n})\r\n\r\nconsole.log(\"Works\");\r\n"]}